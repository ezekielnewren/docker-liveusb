#!/bin/sh

# this is the init script version
VERSION=3.9.0-r0
SINGLEMODE=no
sysroot="$ROOT"/sysroot
splashfile=/.splash.ctrl
repofile="$ROOT"/tmp/repositories

# some helpers
ebegin() {
	last_emsg="$*"
	echo "$last_emsg..." > "$ROOT"/dev/kmsg
	[ "$KOPT_quiet" = yes ] && return 0
	echo -n " * $last_emsg: "
}
eend() {
	local msg
	if [ "$1" = 0 ] || [ $# -lt 1 ] ; then
		echo "$last_emsg: ok." > "$ROOT"/dev/kmsg
		[ "$KOPT_quiet" = yes ] && return 0
		echo "ok."
	else
		shift
		echo "$last_emsg: failed. $*" > "$ROOT"/dev/kmsg
		if [ "$KOPT_quiet" = "yes" ]; then
			echo -n "$last_emsg "
		fi
		echo "failed. $*"
		echo "initramfs emergency recovery shell launched. Type 'exit' to continue boot"
		/bin/busybox sh
	fi
}


/bin/busybox mkdir -p "$ROOT"/usr/bin \
	"$ROOT"/usr/sbin \
	"$ROOT"/proc \
	"$ROOT"/sys \
	"$ROOT"/dev \
	"$sysroot" \
	"$ROOT"/media/cdrom \
	"$ROOT"/media/usb \
	"$ROOT"/tmp \
	"$ROOT"/etc \
	"$ROOT"/run/cryptsetup

# Spread out busybox symlinks and make them available without full path
/bin/busybox --install -s
export PATH="$PATH:/usr/bin:/bin:/usr/sbin:/sbin"

# Make sure /dev/null is a device node. If /dev/null does not exist yet, the command
# mounting the devtmpfs will create it implicitly as an file with the "2>" redirection.
# The -c check is required to deal with initramfs with pre-seeded device nodes without
# error message.
[ -c /dev/null ] || $MOCK mknod -m 666 /dev/null c 1 3

$MOCK mount -t sysfs -o noexec,nosuid,nodev sysfs /sys
$MOCK mount -t devtmpfs -o exec,nosuid,mode=0755,size=2M devtmpfs /dev 2>/dev/null \
	|| $MOCK mount -t tmpfs -o exec,nosuid,mode=0755,size=2M tmpfs /dev

# Make sure /dev/kmsg is a device node. Writing to /dev/kmsg allows the use of the
# earlyprintk kernel option to monitor early init progress. As above, the -c check
# prevents an error if the device node has already been seeded.
[ -c /dev/kmsg ] || $MOCK mknod -m 660 /dev/kmsg c 1 11

$MOCK mount -t proc -o noexec,nosuid,nodev proc /proc
# pty device nodes (later system will need it)
[ -c /dev/ptmx ] || $MOCK mknod -m 666 /dev/ptmx c 5 2
[ -d /dev/pts ] || $MOCK mkdir -m 755 /dev/pts
$MOCK mount -t devpts -o gid=5,mode=0620,noexec,nosuid devpts /dev/pts

# shared memory area (later system will need it)
mkdir -p "$ROOT"/dev/shm
$MOCK mount -t tmpfs -o nodev,nosuid,noexec shm /dev/shm


# read the kernel options. we need surve things like:
#  acpi_osi="!Windows 2006" xen-pciback.hide=(01:00.0)
eval "set -- $(cat /proc/cmdline)"

for v in "$@"; do
    varname="$(echo $v | cut -d= -f1)"
    if [ $(echo $v | grep -c =) -le 0 ]; then
        varvalue="yes"
    else
        varvalue=$(echo $v | cut -d= -f2)
    fi
    eval "export KOPT_${varname}=$varvalue"
done

echo "Alpine Init $VERSION" > "$ROOT"/dev/kmsg
[ -n "$KOPT_quiet" ] && echo "Alpine Init $VERSION"

# pick first keymap if found
for map in "$ROOT"/etc/keymap/*; do
	if [ -f "$map" ]; then
		ebegin "Setting keymap ${map##*/}"
		zcat "$map" | loadkmap
		eend
		break
	fi
done

# hide kernel messages
[ -n "$KOPT_quiet" ] && dmesg -n 1

# load available drivers to get access to modloop media
ebegin "Loading boot drivers"

$MOCK modprobe -a $(echo "$KOPT_modules $ROOT_TYPE" | tr ',' ' ' ) loop squashfs simpledrm 2> /dev/null
if [ -f "$ROOT"/etc/modules ] ; then
	sed 's/\#.*//g' < /etc/modules |
	while read module args; do
		$MOCK modprobe -q $module $args
	done
fi
eend 0

nlplug-findfs "enable console"

scan_hardware() {
    mdev -s
    exec 3<&0
    blkid | while IFS= read -r line; do
        path=$(echo $line | cut -d: -f1)
        param=$(echo $line | cut -d: -f2)
        eval $param
        ln -sf $path /dev/disk/by-uuid/$UUID
    done
    exec 3<&-
}
export scan_hardware
scan_hardware

get_passphrase() {
    FDE_NAME="$1"
    read -sp "unlock drive $FDE_NAME: " PASSPHRASE
}
export get_passphrase

export fs_root=$(cat /etc/fstab.json | jq -Mc '.["/"]')
export ROOT_TYPE=$(echo $fs_root | jq -r .type)
export ROOT_UUID=$(echo $fs_root | jq -r .device)

if [ -n "$KOPT_usurp" ]; then
    echo "usurping init, it's up to you to boot the system now..."
    exec sh
fi

if [ -n "$KOPT_break" ]; then
    echo "break requested, entering shell, exit to continue"
    sh
fi

if [ -n "$KOPT_debug" ]; then
    echo "debugging requested"
    set -x
fi

ebegin "starting pcscd"
pcscd -f &
export PCSCD_PID=$!
sleep 1
eend 0

echo $fs_root | jq --exit-status .fde 2>&1 >/dev/null; ec=$?
if [ $ec -eq 0 ]; then
    export FDE_NAME=$(echo $fs_root | jq -r .fde.name )
    export FDE_UUID=$(echo $fs_root | jq -r .fde.device )

    ## attempt auto-unlock
    eval $(echo $FDE_UUID)
    pw=$(python3 /opt/eckdf.py $UUID)
    echo -n $pw | cryptsetup luksOpen $FDE_UUID $FDE_NAME -; ec=$?
    if [ $ec -ne 0 ]; then
        for i in {1..3}; do
            get_passphrase $FDE_NAME
            echo -n $PASSPHRASE | cryptsetup luksOpen $FDE_UUID $FDE_NAME -; ec=$?
            if [ $ec -eq 0 ]; then
                break
            fi
        done
    fi
    scan_hardware
fi



mount -t $ROOT_TYPE $ROOT_UUID /sysroot; ec=$?
if [ $ec -ne 0 ]; then
    echo "failed to mount root filesystem, exit when the shell when root is mounted"
    /bin/busybox sh
fi

## moving the mounts MUST be the last thing before calling exec switch_root
cat "$ROOT"/proc/mounts 2>/dev/null | while read DEV DIR TYPE OPTS ; do
	if [ "$DIR" != "/" -a "$DIR" != "$sysroot" -a -d "$DIR" ]; then
		mkdir -p $sysroot/$DIR
		$MOCK mount -o move $DIR $sysroot/$DIR
	fi
done

sync

kill -SIGTERM $PCSCD_PID
if [ -n "$KOPT_debug" ]; then
    set +x
fi

# exec switch_root $switch_root_opts $sysroot $chart_init "$KOPT_init" $KOPT_init_args
exec switch_root /sysroot /sbin/init
echo "initramfs emergency recovery shell launched"
exec /bin/busybox sh

